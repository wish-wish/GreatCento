#define SKINNED

#pragma kernel SetupSkin
#pragma kernel Setup
#pragma kernel Seed
#pragma kernel Search
#pragma kernel Grow
#pragma kernel Attract
#pragma kernel Connect
#pragma kernel Remove

#pragma kernel Animate

#define THREAD_1D [numthreads(128, 1, 1)]

#include "../../Common/Shaders/Random.hlsl"

#include "../Common/SkinnedAttraction.hlsl"
#include "../Common/SkinnedNode.hlsl"
#include "../Common/Edge.hlsl"
#include "../Common/SkinnedCandidate.hlsl"
#include "./Kernels/Define.hlsl"

StructuredBuffer<float3> _Vertices;
StructuredBuffer<uint> _Bones;
StructuredBuffer<float4x4> _BoneMatrices, _BindPoses;
RWStructuredBuffer<SkinnedAttraction> _Attractions;

AppendStructuredBuffer<uint> _NodesPoolAppend;
ConsumeStructuredBuffer<uint> _NodesPoolConsume;
RWStructuredBuffer<SkinnedNode> _Nodes;

AppendStructuredBuffer<SkinnedCandidate> _CandidatesAppend;
ConsumeStructuredBuffer<SkinnedCandidate> _CandidatesConsume;

SkinnedNode InitializeNode(SkinnedNode node)
{
  node.position = node.animated = float3(0, 0, 0);
  node.index0 = -1;
  node.t = 0;
  node.offset = 0;
  node.mass = 0;
  node.from = -1;
  return node;
}

uint CreateNode(out SkinnedNode node)
{
  uint i = _NodesPoolConsume.Consume();
  node = InitializeNode(node);
  node.active = true;
  return i;
}

THREAD_1D
void SetupSkin (uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;
  uint count, stride;
  _Attractions.GetDimensions(count, stride);
  if (idx >= count)
    return;

  SkinnedAttraction attr = _Attractions[idx];
  attr.active = true;
  attr.found = false;
  attr.nearest = -1;

  float3 p = attr.position;

  uint closest = -1;
  float dist = 1e8;

  _Vertices.GetDimensions(count, stride);
  for (uint i = 0; i < count; i++)
  {
    float3 v = _Vertices[i];
    float l = distance(v, p);
    if (l < dist)
    {
      dist = l;
      closest = i;
    }
  }

  attr.bone = _Bones[closest];
  _Attractions[idx] = attr;
}

THREAD_1D
#include "./Kernels/Setup.hlsl"

THREAD_1D
void Seed (uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;

  uint count, stride;
  _Seeds.GetDimensions(count, stride);
  if (idx >= count)
    return;

  SkinnedNode n;
  uint i = CreateNode(n);
  n.position = n.animated = _Seeds[idx];
  n.t = 1;
  n.offset = 0;
  n.from = -1;
  n.mass = lerp(_MassMin, _MassMax, nrand(id.xy));

  uint nearest = -1;
  float dist = 1e8;

  _Attractions.GetDimensions(count, stride);
  for (uint j = 0; j < count; j++)
  {
    SkinnedAttraction attr = _Attractions[j];
    float l = distance(attr.position, n.position);
    if (l < dist)
    {
      nearest = j;
      dist = l;
    }
  }
  n.index0 = _Attractions[nearest].bone;

  _Nodes[i] = n;
}

THREAD_1D
#include "./Kernels/Search.hlsl"

THREAD_1D
#include "./Kernels/Grow.hlsl"

THREAD_1D
#include "./Kernels/Attract.hlsl"

THREAD_1D
#include "./Kernels/Connect.hlsl"

THREAD_1D
#include "./Kernels/Remove.hlsl"

THREAD_1D
void Animate (uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;
  uint count, stride;
  _Nodes.GetDimensions(count, stride);
  if (idx >= count)
    return;

  SkinnedNode node = _Nodes[idx];
  if (node.active)
  {
    float4x4 bind = _BindPoses[node.index0];
    float4x4 m = _BoneMatrices[node.index0];
    node.animated = mul(mul(m, bind), float4(node.position, 1)).xyz;
    _Nodes[idx] = node;
  }
}

