#pragma kernel Reset
#pragma kernel CalculateNormal
#pragma kernel Build

#define THREAD_1D [numthreads(128, 1, 1)]
#define THREAD_3D [numthreads(8, 8, 8)]

struct Vertex
{
  float3 position;
  float3 normal;
};

SamplerState _TrilinearClamp, _LinearClamp, _PointClamp;

float _Threshold;

uint _Width, _Height, _Depth, _Border;
float _Inv;

StructuredBuffer<int> _TriangleConnectionTable;
StructuredBuffer<int> _CubeEdgeFlags;

Texture3D<float> _Volume;

RWStructuredBuffer<Vertex> _Buffer;
Texture3D<float3> _Normals;
RWTexture3D<float3> _Result;

static int2 edgeConnection[12] =
{
  int2(0, 1), int2(1, 2), int2(2, 3), int2(3, 0), int2(4, 5), int2(5, 6), int2(6, 7), int2(7, 4), int2(0, 4), int2(1, 5), int2(2, 6), int2(3, 7)
};

static float3 edgeDirection[12] =
{
  float3(1.0f, 0.0f, 0.0f), float3(0.0f, 1.0f, 0.0f), float3(-1.0f, 0.0f, 0.0f), float3(0.0f, -1.0f, 0.0f),
	float3(1.0f, 0.0f, 0.0f), float3(0.0f, 1.0f, 0.0f), float3(-1.0f, 0.0f, 0.0f), float3(0.0f, -1.0f, 0.0f),
	float3(0.0f, 0.0f, 1.0f), float3(0.0f, 0.0f, 1.0f), float3(0.0f, 0.0f, 1.0f), float3(0.0f, 0.0f, 1.0f)
};

static float3 vertexOffset[8] =
{
  float3(0, 0, 0), float3(1, 0, 0), float3(1, 1, 0), float3(0, 1, 0),
	float3(0, 0, 1), float3(1, 0, 1), float3(1, 1, 1), float3(0, 1, 1)
};

float Fetch(int x, int y, int z)
{
  float3 uv = float3(x * _Inv, y * _Inv, z * _Inv);

  if (uv.x <= 0.0 || 1.0 <= uv.x || uv.y <= 0.0 || 1.0 <= uv.y || uv.z <= 0.0 || 1.0 <= uv.z)
    return -1;

  return (_Volume.SampleLevel(_PointClamp, uv, 0) - 0.5) * 2.0;
  // return _Volume.SampleLevel(_LinearClamp, uv, 0);
  // return _Volume.SampleLevel(_TrilinearClamp, uv, 0);
}

void FillCube(int x, int y, int z, out float cube[8])
{
  cube[0] = Fetch(x, y, z);
  cube[1] = Fetch(x + 1, y, z);
  cube[2] = Fetch(x + 1, y + 1, z);
  cube[3] = Fetch(x, y + 1, z);

  cube[4] = Fetch(x, y, z + 1);
  cube[5] = Fetch(x + 1, y, z + 1);
  cube[6] = Fetch(x + 1, y + 1, z + 1);
  cube[7] = Fetch(x, y + 1, z + 1);
}

float GetOffset(float v1, float v2)
{
  float delta = v2 - v1;
  return (delta == 0.0f) ? 0.5f : (_Threshold - v1) / delta;
}

Vertex CreateVertex(float3 position, float3 size)
{
  Vertex v;
  float3 uv = position / size;
  v.position = position * _Inv - 0.5;
  v.normal = _Normals.SampleLevel(_PointClamp, uv, 0).xyz;
  return v;
}

THREAD_1D
void Reset(uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;
  uint count, stride;
  _Buffer.GetDimensions(count, stride);
  if (idx >= count)
    return;

  Vertex vert;
  vert.position = float3(-1, -1, -1);
  vert.normal = float3(0, 0, 0);
  _Buffer[idx] = vert;
}

THREAD_3D
void CalculateNormal(uint3 id : SV_DispatchThreadID)
{
  if (id.x >= _Width || id.y >= _Height || id.z >= _Depth)
    return;

  /*
  float v = Fetch(id.x, id.y, id.z);
  float dx = v - Fetch(id.x + 1, id.y, id.z);
  float dy = v - Fetch(id.x, id.y + 1, id.z);
  float dz = v - Fetch(id.x, id.y, id.z + 1);
  */

  float dx = Fetch(id.x - 1, id.y, id.z) - Fetch(id.x + 1, id.y, id.z);
  float dy = Fetch(id.x, id.y - 1, id.z) - Fetch(id.x, id.y + 1, id.z);
  float dz = Fetch(id.x, id.y, id.z - 1) - Fetch(id.x, id.y, id.z + 1);

  _Result[id] = normalize(float3(dx, dy, dz));
}

THREAD_3D
void Build(uint3 id : SV_DispatchThreadID)
{
  if (id.x >= _Width - 1 - _Border)
    return;
  if (id.y >= _Height - 1 - _Border)
    return;
  if (id.z >= _Depth - 1 - _Border)
    return;

  float3 pos = float3(id);

  float cube[8];
  FillCube(id.x, id.y, id.z, cube);

  int i = 0;
  int flagIndex = 0;
  float3 edgeVertex[12];

  for (i = 0; i < 8; i++)
    if (cube[i] <= _Threshold)
      flagIndex |= 1 << i;

  int edgeFlags = _CubeEdgeFlags[flagIndex];

  if (edgeFlags == 0)
    return;

  for (i = 0; i < 12; i++)
  {
    if ((edgeFlags & (1 << i)) != 0)
    {
      float offset = GetOffset(cube[edgeConnection[i].x], cube[edgeConnection[i].y]);
      edgeVertex[i] = pos + (vertexOffset[edgeConnection[i].x] + offset * edgeDirection[i]);
    }
  }

  float3 size = float3(_Width - 1, _Height - 1, _Depth - 1);

  int idx = id.x + id.y * _Width + id.z * _Width * _Height;

  for (i = 0; i < 5; i++)
  {
    if (_TriangleConnectionTable[flagIndex * 16 + 3 * i] >= 0)
    {
      float3 position;

      position = edgeVertex[_TriangleConnectionTable[flagIndex * 16 + (3 * i + 0)]];
      _Buffer[idx * 15 + (3 * i + 0)] = CreateVertex(position, size);

      position = edgeVertex[_TriangleConnectionTable[flagIndex * 16 + (3 * i + 1)]];
      _Buffer[idx * 15 + (3 * i + 1)] = CreateVertex(position, size);

      position = edgeVertex[_TriangleConnectionTable[flagIndex * 16 + (3 * i + 2)]];
      _Buffer[idx * 15 + (3 * i + 2)] = CreateVertex(position, size);
    }
  }

}

